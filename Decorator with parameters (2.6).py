"""–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ."""

from functools import wraps
from datetime import datetime
import time


def retry(max_attempts=3, delay=1, exceptions=(Exception,)):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    
    Args:
        max_attempts (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        delay (float): –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        exceptions (tuple): –¢–∏–ø—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
        
    Returns:
        function: –î–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(1, max_attempts + 1):
                try:
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
                    result = func(*args, **kwargs)
                    
                    if attempt > 1:
                        print(f"‚úÖ –£—Å–ø–µ—Ö –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}!")
                    
                    return result
                    
                except exceptions as e:
                    last_exception = e
                    print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
                    
                    if attempt < max_attempts:
                        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        time.sleep(delay)
            
            print(f"üö´ –í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π")
            raise last_exception
            
        return wrapper
    return decorator


def timer(unit="seconds"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    
    Args:
        unit (str): –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ ('seconds', 'milliseconds')
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            start_time = time.time()
            result = func(*args, **kwargs)
            end_time = time.time()
            
            execution_time = end_time - start_time
            
            if unit == "milliseconds":
                execution_time *= 1000
                time_str = f"{execution_time:.2f} –º—Å"
            else:
                time_str = f"{execution_time:.6f} —Å–µ–∫"
            
            print(f"‚è±Ô∏è –§—É–Ω–∫—Ü–∏—è {func.__name__} –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∑–∞ {time_str}")
            return result
            
        return wrapper
    return decorator


def validate_input(*validators):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        *validators: –§—É–Ω–∫—Ü–∏–∏-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {func.__name__}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            for i, (arg, validator) in enumerate(zip(args, validators)):
                if validator:
                    validator(arg, f"–∞—Ä–≥—É–º–µ–Ω—Ç {i}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            for key, value in kwargs.items():
                print(f"   {key} = {value}")
            
            return func(*args, **kwargs)
        return wrapper
    return decorator


# –§—É–Ω–∫—Ü–∏–∏-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
def validate_positive(value, param_name):
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª."""
    if value <= 0:
        raise ValueError(f"{param_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")


def validate_integer(value, param_name):
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª."""
    if not isinstance(value, int):
        raise ValueError(f"{param_name} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")


# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
@retry(max_attempts=3, delay=0.5, exceptions=(ValueError,))
@timer(unit="milliseconds")
def risky_division(a, b):
    """–†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—à–∏–±–∫–∏."""
    if b == 0:
        raise ValueError("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!")
    return a / b


@retry(max_attempts=2, delay=1)
@timer()
def simulate_network_request():
    """–ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏."""
    import random
    
    if random.random() < 0.7:  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
        raise ConnectionError("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞")
    
    return "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"


@validate_input(validate_positive, validate_positive)
@timer(unit="milliseconds")
def calculate_factorial(n):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    from functools import reduce
    from operator import mul
    
    return reduce(mul, range(1, n + 1), 1)


@retry(max_attempts=4, delay=0.2)
@validate_input(validate_integer, validate_positive)
def fibonacci_numbers(count):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏."""
    from itertools import islice
    
    def fib_generator():
        a, b = 0, 1
        while True:
            yield a
            a, b = b, a + b
    
    return list(islice(fib_generator(), count))


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    print("=== –î–ï–ö–û–†–ê–¢–û–†–´ –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò ===\n")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ retry
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ retry:")
    print("=" * 40)
    
    try:
        result = risky_division(10, 0)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        print(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    print("\n2. –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
    print("=" * 40)
    
    try:
        result = simulate_network_request()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        print(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("=" * 40)
    
    try:
        result = calculate_factorial(5)
        print(f"–§–∞–∫—Ç–æ—Ä–∏–∞–ª 5 = {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    print("\n4. –£—Å–ø–µ—à–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:")
    print("=" * 40)
    
    try:
        result = risky_division(10, 2)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è: {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–∏–±–æ–Ω–∞—á—á–∏
    print("\n5. –ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏:")
    print("=" * 40)
    
    try:
        result = fibonacci_numbers(8)
        print(f"–ü–µ—Ä–≤—ã–µ 8 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏: {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()