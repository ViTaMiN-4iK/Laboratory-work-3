#–î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç DeepSeek –≤–µ—Ä—Å–∏–∏ 3 (DeepSeek-V3) –∫–æ–º–ø–∞–Ω–∏–∏ DeepSeek.

import csv
import os
from typing import List, Dict, Any


def create_sample_csv():
    if not os.path.exists('users.csv'):
        data = [
            ['name', 'age', 'city', 'salary'],
            ['–ò–≤–∞–Ω', '30', '–ú–æ—Å–∫–≤–∞', '60000'],
            ['–ú–∞—Ä–∏—è', '25', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '45000'],
            ['–ü–µ—Ç—Ä', '35', '–ö–∞–∑–∞–Ω—å', '75000'],
            ['–ê–Ω–Ω–∞', '22', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '35000'],
            ['–°–µ—Ä–≥–µ–π', '28', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '52000'],
            ['–û–ª—å–≥–∞', '40', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '48000']
        ]
        
        with open('users.csv', 'w', encoding='utf-8', newline='') as file:
            writer = csv.writer(file)
            writer.writerows(data)
        print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ users.csv")


def read_csv_file(filename: str) -> List[Dict[str, Any]]:
    """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π."""
    with open(filename, 'r', encoding='utf-8') as file:
        return list(csv.DictReader(file))


def filter_and_transform_data(data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è map/filter."""
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 25 –ª–µ—Ç
    filtered_data = list(filter(lambda row: int(row['age']) > 25, data))
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    transformed_data = list(map(lambda row: {
        'name': row['name'].upper(),
        'age': int(row['age']),
        'city': row['city'].title(),
        'salary': float(row['salary']),
        'salary_category': 'HIGH' if float(row['salary']) > 50000 else 'LOW'
    }, filtered_data))
    
    return transformed_data


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        create_sample_csv()
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        test_data = read_csv_file('users.csv')
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —á–∏—Ç–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert len(test_data) > 0, "–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è"
        print("‚úÖ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        result = filter_and_transform_data(test_data)
        expected_count = len([row for row in test_data if int(row['age']) > 25])
        assert len(result) == expected_count, f"–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}, –ø–æ–ª—É—á–µ–Ω–æ {len(result)}"
        print("‚úÖ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –ø—Ä–æ–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if len(result) > 0:
            assert result[0]['name'].isupper(), "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"
            assert isinstance(result[0]['age'], int), "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int"
            assert isinstance(result[0]['salary'], float), "–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å float"
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω")
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        return False


def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests_passed = run_tests()
    print()
    
    if not tests_passed:
        print("‚ö†Ô∏è  –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        return
    
    try:
        # –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        original_data = read_csv_file('users.csv')
        processed_data = filter_and_transform_data(original_data)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for row in processed_data:
            print(f"{row['name']} | {row['age']} | {row['city']} | {row['salary']} | {row['salary_category']}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()